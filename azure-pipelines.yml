trigger:
  branches:
    include:
      - main

parameters:
  - name: environment
    displayName: "Choose ENV"
    type: string
    default: "dev"
    values:
      - dev
      - prod
      - qa

variables: 
  - name: imagename
    value: appogin

pool:
  vmImage: ubuntu-latest   # Microsoft-hosted agent

# ---------------- Build Stage ----------------
stages:
  - stage: Build
    displayName: "Build Application"
    jobs:
      - job: MavenBuild
        steps:
          # ✅ Cache Maven dependencies
          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
              path: $(HOME)/.m2   # ✅ Correct path on Linux agents
            displayName: "Cache Maven dependencies"

          # ✅ Build without running tests to avoid failing build
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package -DskipTests'

# ---------------- Test Stage ----------------
  - stage: Test
    displayName: "Run Unit Tests"
    dependsOn: Build
    jobs:
      - job: MavenTest
        steps:
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/*.xml'

# ---------------- Docker Build & Push Stage ----------------
  - stage: DockerBuildPush
    displayName: "Build & Push Docker Image"
    dependsOn: Test
    jobs:
      - job: Docker
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'AzureCR-serviceconnection'   # Replace with your Docker Registry connection
              repository: '$(imagename)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'

# ---------------- Deploy Stage ----------------
  - stage: Deploy
    displayName: "Deploy to AKS"
    dependsOn: DockerBuildPush
    jobs:
      - deployment: DeployApp
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Kubernetes@1
                  inputs:
                    connectionType: Azure Resource Manager
                    azureSubscriptionEndpoint: 'Zomato-ARG'   # Replace with your ARM service connection
                    azureResourceGroup: "rg-${{ parameters.environment }}"
                    kubernetesCluster: "aks-${{ parameters.environment }}"
                    command: apply
                    useConfigurationFile: true
                    configuration: 'manifests/deployment.yaml'

